using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerScripts : MonoBehaviour
{
    [Header("이동관련 속성")]

    [Tooltip("기본 이동속도")]
    public float walkSpeed = 2.0f; // 걷기 속도
    public float runSpeed = 3.5f; // 달리기 속도
    public float directionRotateSpeed = 100.0f; // 이동방향을 변경하기 위한 속도
    public float bodyRotateSpeed = 2.0f; // 몸통의 방향을 변경하기 위한 속도

    [Range(0.01f, 5.0f)] // 바로 밑 변수의 범위 지정
    public float velocityChangeSpeed = 0.1f; // 속도가 변경되기 위한 속도

    private Vector3 currentVelocity = Vector3.zero;
    private Vector3 moveDirection = Vector3.zero;
    private CharacterController myCharacterController = null;
    private CollisionFlags collisionFlags = CollisionFlags.None;
    private float gravity = 9.8f; // 중력값
    private float verticalSpeed = 0.0f; // 수직 속도
    private bool cannotMove = false; // 이동제한 플래그

    [Header("애니메이션 관련 속성")]
    public AnimationClip idleAnimationClip = null;
    public AnimationClip walkAnimationClip = null;
    public AnimationClip runAnimationClip = null;

    public AnimationClip Attack1AniClip = null;
    public AnimationClip Attack2AniClip = null;
    public AnimationClip Attack3AniClip = null;
    public AnimationClip Attack4AniClip = null;

    public AnimationClip SkillAniClip = null; // 스킬애니메이션 클립

    private Animation myAnimation = null;
    // 캐릭터 상태 목록
    public enum PlayerState { None, Idle, Walk, Run, Attack, Skill }
    [Header("캐릭터 상태")]
    public PlayerState myState = PlayerState.None;

    public enum PlayerAttackState { Attack1, Attack2, Attack3, Attack4 }
    public PlayerAttackState attackState = PlayerAttackState.Attack1;
    // 다음 공격 활성화 여부를 체크하는 변수
    public bool nextAttack = false;

    [Header("전투 관련")]
    public TrailRenderer AttackTrailRenderer = null;
    public CapsuleCollider AttackCapsuleCollider = null;
    public GameObject SkillEffect = null;

    void Start()
    {
        myCharacterController = GetComponent<CharacterController>();

        myAnimation = GetComponent<Animation>();
        myAnimation.playAutomatically = false; // 자동재생 끄기
        myAnimation.Stop(); // 애니메이션 정지

        myState = PlayerState.Idle;
        myAnimation[idleAnimationClip.name].wrapMode = WrapMode.Loop; // 대기 애니메이션 반복재생
        myAnimation[walkAnimationClip.name].wrapMode = WrapMode.Loop; // 걷기 애니메이션 반복재생
        myAnimation[runAnimationClip.name].wrapMode = WrapMode.Loop; // 달리기 애니메이션 반복재샌

        myAnimation[Attack1AniClip.name].wrapMode = WrapMode.Once; // 공격 애니메이션들은 한번만 재생
        myAnimation[Attack2AniClip.name].wrapMode = WrapMode.Once;
        myAnimation[Attack3AniClip.name].wrapMode = WrapMode.Once;
        myAnimation[Attack4AniClip.name].wrapMode = WrapMode.Once;
        myAnimation[SkillAniClip.name].wrapMode = WrapMode.Once; // 스킬 애니메이션은 한번만 재생


        AddAnimationEvent(Attack1AniClip, "OnAttackAniFinished");
        AddAnimationEvent(Attack2AniClip, "OnAttackAniFinished");
        AddAnimationEvent(Attack3AniClip, "OnAttackAniFinished");
        AddAnimationEvent(Attack4AniClip, "OnAttackAniFinished");
        AddAnimationEvent(SkillAniClip, "OnSkillAniFinished");

    }

    void Update()
    {
        // 이동
        Walk();
        // 이동방향으로 몸통의 방향을 돌려줌
        BodyDirectionChnage();
        // 상태에 맞춰서 애니메이션을 재생시켜줌
        AnimationControl();
        // 조건에 맞춰서 캐릭터의 상태를 변경시켜줌
        CheckState();
        // 마우스 왼쪽 클릭으로 공격 상태로 변경시켜줌
        InputControl();
        // 중력적용
        ApplyGravity();
        // 공격관련 컴포넌트 제어
        AttackComponentControl();
    }

    /// <summary>
    /// 이동 관련 함수
    /// </summary>
    void Walk()
    {
        if(cannotMove == true)
        {
            return;
        }

        Transform cameraTransfrom = Camera.main.transform; // 메인 카메라의 트랜스폼 컨포넌트
        Vector3 forward = cameraTransfrom.TransformDirection(Vector3.forward); // 카메라가 바라보는 방향이 월드상에서는 어떤 방향인지 얻어온다.
        forward.y = 0.0f;
        Vector3 right = new Vector3(forward.z, 0.0f, -forward.x);

        float vertical = Input.GetAxis("Vertical");
        float horizontal = Input.GetAxis("Horizontal");

        Vector3 targetDirection = horizontal * right + vertical * forward; // 우리가 이동하고자 하는 방향

        // 현재 아동하는 방향애서 원하는 방향으로 조금씩이 회전
        moveDirection = Vector3.RotateTowards(moveDirection, targetDirection, directionRotateSpeed * Mathf.Deg2Rad * Time.deltaTime, 1000.0f);
        // 방향이기 떄문에 크기는 없애고 방향만 가져온다.
        moveDirection = moveDirection.normalized;

        float speed = walkSpeed; // 기본 이동속도
        if(myState == PlayerState.Run)
        {
            speed = runSpeed;
        }
        // 중력 벡터
        Vector3 gravityVector = new Vector3(0.0f, verticalSpeed, 0.0f);

        // 이번 프레임에 움직일양
        Vector3 moveAmount = (moveDirection * speed * Time.deltaTime) + gravityVector;
        // 실제이동
        collisionFlags = myCharacterController.Move(moveAmount);
    }

    void OnGUI()
    {
        // 충돌정보
        GUILayout.Label("충돌 : " + collisionFlags.ToString());

        GUILayout.Label("현재속도 : " + GetVelocitySpeed().ToString());
        // 캐릭터 컨트롤러 컴포넌트를 찾았고, 현재 내 캐릭터의 이동속도가 0이 아니라면
        if(myCharacterController != null && myCharacterController.velocity != Vector3.zero)
        {
            // 현재 내 캐릭터가 이동하는 방향(+ 크기)
            GUILayout.Label("current Velocity Vector : " + myCharacterController.velocity.ToString());
            // 현재 내 속도
            GUILayout.Label("current Velocity Magnitude : " + myCharacterController.velocity.magnitude.ToString());
        }    
    }

    /// <summary>
    /// 현재 내 캐릭터의 이동속도를 얻어옴
    /// </summary>
    /// <returns></returns>
    float GetVelocitySpeed()
    {
        // 만약 내 캐릭터가 멈춰있다면
        if (myCharacterController.velocity == Vector3.zero)
        {   // 현재 속도를 0으로
            currentVelocity = Vector3.zero;
        }
        else
        {
            Vector3 goalVelocity = myCharacterController.velocity;
            goalVelocity.y = 0.0f;
            currentVelocity = Vector3.Lerp(currentVelocity, goalVelocity, velocityChangeSpeed * Time.fixedDeltaTime);
        }
        // currentVelocity의 크기를 리턴
        return currentVelocity.magnitude;
    }
    /// <summary>
    /// 몸통의 방향을 이동방향으로 돌려줌
    /// </summary>
    void BodyDirectionChnage()
    {
        // 만약 내 캐릭터가 움직이고 있다면
        if(GetVelocitySpeed() > 0)
        {
            Vector3 newforward = myCharacterController.velocity;
            newforward.y = 0.0f;
            transform.forward = Vector3.Lerp(transform.forward,newforward, bodyRotateSpeed * Time.deltaTime);
        }
    }
    /// <summary>
    /// 애니메이션을 재생시키는 함수
    /// </summary>
    /// <param name="clip"></param>
    void AnimationPlay(AnimationClip clip)
    {
        myAnimation.clip = clip;
        myAnimation.CrossFade(clip.name);
    }
    /// <summary>
    /// 내 상태에 맞추어 애니메이션을 재생
    /// </summary>
    void AnimationControl()
    {
        switch (myState)
        {
            case PlayerState.Idle:
                AnimationPlay(idleAnimationClip);
                break;
            case PlayerState.Walk:
                AnimationPlay(walkAnimationClip);
                break;
            case PlayerState.Run:
                AnimationPlay(runAnimationClip);
                break;
            case PlayerState.Attack:
                // 공격상태에 맞는 애니메이션을 재생시켜줌
                AttackAnimationControl();
                break;
            case PlayerState.Skill:
                AnimationPlay(SkillAniClip);
                break;
        }
    }
    /// <summary>
    /// 현재 상태를 변경하는 함수
    /// </summary>
    void CheckState()
    {
        float currentSpeed = GetVelocitySpeed();
        switch(myState)
        {
            case PlayerState.Idle:
                if(currentSpeed > 0.1f)
                {
                    myState = PlayerState.Walk;
                }
                break;
            case PlayerState.Walk:
                if(currentSpeed > 0.5f)
                {
                    myState = PlayerState.Run;
                }else if(currentSpeed < 0.01f)
                {
                    myState = PlayerState.Idle;
                }
                break;
            case PlayerState.Run:
                if(currentSpeed < 0.5f)
                {
                    myState = PlayerState.Walk;
                }else if(currentSpeed < 0.01f)
                {
                    myState = PlayerState.Idle;
                }
                break;
            case PlayerState.Attack:
                cannotMove = true;
                break;
            case PlayerState.Skill:
                cannotMove = true;
                break;
        }
    }
    /// <summary>
    /// 마우스 왼쪽버튼으로 공격
    /// </summary>
    void InputControl()
    {
        // 0 마우스 왼쪽, 1 마우스 오른쪽, 2 마우스 휠
        if(Input.GetMouseButtonDown(0) == true)
        {
            // 내가 공격중이 아니라면 공격을 실행
            if(myState != PlayerState.Attack)
            {
                myState = PlayerState.Attack;
                attackState = PlayerAttackState.Attack1;
            }
            else
            {
                // 공격 중이고, 애니메이션이 일정이상 재생되었다면 다음 공격을 재생
                switch (attackState)
                {
                    case PlayerAttackState.Attack1:
                        if(myAnimation[Attack1AniClip.name].normalizedTime > 0.1f)
                        {
                            nextAttack = true;
                        } 
                        break;
                    case PlayerAttackState.Attack2:
                        if (myAnimation[Attack2AniClip.name].normalizedTime > 0.1f)
                        {
                            nextAttack = true;
                        }
                        break;
                    case PlayerAttackState.Attack3:
                        if (myAnimation[Attack3AniClip.name].normalizedTime > 0.1f)
                        {
                            nextAttack = true;
                        }
                        break;
                    case PlayerAttackState.Attack4:
                        if (myAnimation[Attack4AniClip.name].normalizedTime > 0.1f)
                        {
                            nextAttack = true;
                        }
                        break;
                }
            }
        }
        // 마우스 오른쪽 버튼을 눌렀다면
        if (Input.GetMouseButton(1) == true)
        {
            if(myState == PlayerState.Attack)
            {
                attackState = PlayerAttackState.Attack1;
                nextAttack = false;
            }
            myState = PlayerState.Skill;
        }
    }
    /// <summary>
    /// 공격 애니메이션 재생이 끝나면 호출되는 애니메이션 이벤트 함수
    /// </summary>
    void OnAttackAniFinished()
    {
        if(nextAttack == true)
        {
            nextAttack = false;
            switch (attackState)
            {
                case PlayerAttackState.Attack1:
                    attackState = PlayerAttackState.Attack2;
                    break;
                case PlayerAttackState.Attack2:
                    attackState = PlayerAttackState.Attack3;
                    break;
                case PlayerAttackState.Attack3:
                    attackState = PlayerAttackState.Attack4;
                    break;
                case PlayerAttackState.Attack4:
                    attackState = PlayerAttackState.Attack1;
                    break;
            }
        }
        else
        {
            myState = PlayerState.Idle;
            attackState = PlayerAttackState.Attack1;
            cannotMove = false;
        }
    }
    // 스킬 애니메이션 재생이 끝났다면
    void OnSkillAniFinished()
    {
        Vector3 position = transform.position;
        position += transform.forward * 2.0f;
        Instantiate(SkillEffect, position, Quaternion.identity);
        myState = PlayerState.Idle;
    }

    /// <summary>
    /// 애니메이션 클립 재생이 끝날때쯤 애니메이션 이벤트 함수를 호출시켜주도록 추가
    /// </summary>
    /// <param name="clip"></param>
    /// <param name="FuncName"></param>
    void AddAnimationEvent(AnimationClip clip, string FuncName)
    {
        AnimationEvent newEven = new AnimationEvent();
        newEven.functionName = FuncName;
        newEven.time = clip.length - 0.1f;
        clip.AddEvent(newEven);
    }
    /// <summary>
    /// 공격 애니메이션을 재생
    /// </summary>
    void AttackAnimationControl()
    {
        switch (attackState)
        {
            case PlayerAttackState.Attack1:
                AnimationPlay(Attack1AniClip);
                break;
            case PlayerAttackState.Attack2:
                AnimationPlay(Attack2AniClip);
                break;
            case PlayerAttackState.Attack3:
                AnimationPlay(Attack3AniClip);
                break;
            case PlayerAttackState.Attack4:
                AnimationPlay(Attack4AniClip);
                break;
        }
    }
    /// <summary>
    /// 중력적용
    /// </summary>
    void ApplyGravity()
    {
        // CollidedBelow가 세팅되어다면 => 바닥에 붙었다면
        if ((collisionFlags & CollisionFlags.CollidedBelow) != 0)
        {
            verticalSpeed = 0.0f;
        }
        else
        {
            verticalSpeed -= gravity * Time.deltaTime;
        }
    }
    /// <summary>
    /// 공격관련 컴포넌트 제어
    /// </summary>
    void AttackComponentControl()
    {
        switch (myState)
        {
            // 공격중일때만 트레일 컴포넌트와 충돌 컴포넌트를 활성화
            case PlayerState.Attack:
            case PlayerState.Skill:
                AttackTrailRenderer.enabled = true;
                AttackCapsuleCollider.enabled = true;
                break;
            default:
                AttackTrailRenderer.enabled = false;
                AttackCapsuleCollider.enabled = false;
                break;
        }
    }
}
